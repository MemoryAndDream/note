科技优先  先进行基础的学习以提升后续学习效率；   不要超前研究科技，先把基础科技研究完
效率优先  先作准备工作提升工作效率，磨刀不误砍柴工
支撑学说  战争的车轮一旦开动就无法停止，在开动战车前做好全部准备，然后进攻，胜负往往取决于最后谁撑得住  



持久战  规律的时间允许每天规律学习；宁可少学，不可不学是养成习惯的最好方法

管理学说  赏罚分明：  让真正 努力，有贡献的人得到的更多，应付的人得到的更少。  首先需要公正的考核标准以及考核机构 奖惩不一定是金钱，而是对方需要的东西 考核是个很难的东西，吹牛本领比实干更影响，实际上量化考核还不如 工作能力*工作态度  太重视考核本身就会导致做好工作变成做好表面工作 钢军不是靠钱就能堆出来的，靠凝聚力！！

面向用户编程  建设性的差评需要被奖励 做事做人都是如此 认真做事，用户自然会喜欢提意见  用户是最好的指导

圆滑处世   既然世人皆爱慕虚荣，那就阿谀奉承，生活本来就如此不易，让双方都活的开心点不挺好，毕竟自己开心最重要。

结构编程  有想法就写结构推演 纸上谈兵也比幻想靠谱

厚黑学  不要在意路人的看法，那不重要。有好处才有在乎的价值


交叉学习  学习可以是一个反复过程 实战和理论学习交叉，实战了也得上军校  学完理论基础之后要看例子！！！然后再实践，直接实践没效率的

整合能力，综合使用各种能力互相弥补，比如用最擅长的语言承担不擅长语言的功能。 用python写后台，用js只写前台

完美主义  做事不能急，或者说不是急不急的问题，而是必须做好检查好才算完！

责任感  能力越大，责任就越大；收益越大，责任越大。工作时候态度要好，而完成之后就不要去想了，就像交卷后怎么想都没有用了 想到能做的都做了，这就没有什么遗憾了。

磨刀不误砍柴工 如果因为心急而放弃了学习，那么做事毫无意义！你首先是在为自己编程！其次才是完成任务！

信心  只要思想不滑坡，办法总比困难多

战争学说 有些存在，不是对手，而是敌人；对于敌人就要用各种手段去赢得最大的胜利。侦查，破坏，策反。十则围之，五则攻之，倍则分之，敌则能战之，少则能逃之，不若则能避之。全国为上，破国次之；全军为上，破军次之；全旅为上，破旅次之；全卒为上，破卒次之；全伍为上，破伍次之。是故百战百胜，非善之善者也；不战而屈人之兵，善之善者也。


需求学说  要学会花钱再考虑赚某一类人，某一方向的钱。这个环节无法缺少。比如要赚房产的钱，那么你就要有研究过怎么买房子，有车才能赚车钱，至少在消费上不能脱节！ 需求总的来说是逼，装逼，混日子 但是具体就有很多实现方式，最厉害的是挖掘需求的人。乔布斯：“消费者并不知道自己需要什么，直到我们拿出自己的产品，他们就发现，这是我要的东西”。

门槛判断			任何赚钱的途径都是需要门槛的，就目前来说，要么是靠资本等做门槛；要么是靠欺骗，违法作门槛；技术也是一个门槛。门槛进去了才是拼其他东西，比如智商情商

人际交往 有些人不能做朋友，但是关键时候有用！盟军不一定要志同道合，只要有共同的敌人就行了。

预得先予 人际交往和做事都要先投入才有回报

不可胜在己,可胜在敌  昔之善战者，先为不可胜，以待敌之可胜。

侦查学说 绝不要试图在你不了解的方向作战！除非你做好了功课或者找到了其他有利条件。


进取       前进才能解决问题！！
