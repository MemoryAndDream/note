onLoad方法会在场景加载后立刻执行
对于需要重复生成的节点，我们可以将他保存成 Prefab（预制） 资源，作为我们动态生成节点时使用的模板

cc.Class，传入一个原型对象，在原型对象中以键值对的形式设定所需的类型参数，就能创建出所需要的类。

cc.Class 里放个  
properties: {
        // 星星和主角之间的距离小于这个数值时，就会完成收集
        pickRadius: 0
    }, 后面就不用改脚本了，可以直接改属性。后面的脚本可以用this.pickRadius 来调用


资源文件夹（assets）放置所有本地资源
资源库（library） 由（assets）生成的东西
本地设置（local）creator编辑器设置 不需要版本控制 
项目设置（settings） 发布相关，如发布平台选择，需要版本控制
project.json 文件和 assets 文件夹一起，作为creator项目的识别


Cocos Creator 内部已经包含完整的 JavaScript 引擎和 cocos2d-x 原生引擎，不需要额外安装任何 cocos2d-x 引擎或 Cocos Framework。
内容创作为导向
Cocos Creator 可以说脱胎自 Cocos2d-JS，它们的 API 一脉相承，有很多相同的部分，但由于使用了全新的组件化框架，两者的 API 是有差异的，并且无法互相兼容
不推荐对节点进行继承和扩展，节点只是一个实体，游戏逻辑应该实现在不同的组件中并组合到节点上

数据驱动：所有对象都可以直接序列化和反序列化
序列化和反序列化支持 Cocos Creator 中类的绝大多数公有属性，这些属性通过属性检查器面板暴露给开发者。开发者可以在编辑器中随意修改并保存，保存的过程就是将资源和场景数据序列化到资源数据库

在 Cocos Creator 中，子节点坐标系的坐标原点就是父节点的坐标位置，也就是其锚点的位置。

脚本相关
cc.Class({
    name: "sprite"
});

ctor 构造方法
extends 继承

// 父类
var Shape = cc.Class();

// 子类
var Rect = cc.Class({
    extends: Shape
});

声明属性properties 

属性有类型时需要声明构造函数

数组声明bools: [cc.Boolean],

属性可以设置默认的get/set方法

this.node 获取组件绑定的节点

this.getComponent(cc.Label) 获取组件同一节点上的其他组件，类名可传可不传

对用户定义的组件而言，类名就是脚本的文件名，并且区分大小写。例如 "SinRotate.js" 里声明的组件，类名就是 "SinRotate"。

组件需要访问别的组件信息时可以设置属性里加cc.Node，然后再界面拖动关联过去
properties: {
        // 声明 player 属性
        player: {
            default: null,
            type: cc.Node
        }
    }
如果类型直接就是
 player: {
            default: null,
            type: Player
        }
    },
那拖动关联会直接就是节点下的组件Player

如果节点太多，可以用var cannons = this.node.children;节省关联，直接通过父物体获得所有子物体
this.node.getChildByName("Cannon 01");//cc.find("Cannon 01/Barrel/SFX", this.node);

全局对象 window.Global
定义window.Global = {
    backNode: null,
    backLabel: null,
};
赋值Global.backNode = this.node;


如果不用全局变量，可以用exports和require在不同节点中传递
module.exports = {
    backNode: null,
    backLabel: null,
};
var xx= require("xxx模块名");

cc.find("Canvas/Menu/Back"); 全局查找节点，从根节点逐级查找

常用节点和组件接口
this.node.active = false/true  //节点上所有组件脚本关闭，执行对应脚本的onDisable /onEnable方法 

http://docs.cocos.com/creator/manual/zh/scripting/basic-node-api.html 如更改锚点位置，节点大小等
组件方法：
this.node：该组件所属的节点实例
this.enabled：是否每帧执行该组件的 update 方法，同时也用来控制渲染组件是否显示
update(dt)：作为组件的成员方法，在组件的 enabled 属性为 true 时，其中的代码会每帧执行
onLoad()：组件所在节点进行初始化时（节点添加到节点树时）执行
start()：会在该组件第一次 update 之前执行，通常用于需要在所有组件的 onLoad 初始化完毕后执行的逻辑
lateUpdate 每一帧更新之后

动态增加节点
   var node = new cc.Node('Sprite');
    var sp = node.addComponent(cc.Sprite);
    node.parent = this.node;

克隆节点
    var scene = cc.director.getScene();
    var node = cc.instantiate(this.target);
    node.parent = scene;

创建预制节点
销毁节点
node.destroy()

场景切换
cc.director.loadScene("MyScene");

引擎同时只会运行一个场景，当切换场景时，默认会将场景内所有节点和其他实例销毁。除了常驻节点
设置常驻节点：cc.game.addPersistRootNode(myNode);
常驻节点里的组件就能一直用，可以用来保存数据
可以用这样的方法来储存玩家信息，或下一个场景初始化时需要的各种数据。

场景回调函数
cc.director.loadScene("MyScene", onSceneLaunched);

场景预加载
cc.director.preloadScene("table", function () {
    cc.log("Next scene preloaded");
});
之后在合适的时间调用 loadScene, 就可以真正切换场景。
cc.director.loadScene("table");

资源分成两种，一种叫做 Asset，一种叫做 Raw Asset。
cc.SpriteFrame, cc.AnimationClip, cc.Prefab 等资源都属于 Asset。
URL 字符串指代资源叫做 Raw Asset。

瓦片资源：类似坦克大战的地图块

贝塞尔曲线：通过制定点绘制曲线

creator和cocos2d-js代码逻辑貌似差不多的

require相当于import
当你在脚本中声明了一个组件，Creator 会默认把它导出，其它脚本直接 require 这个模块就能使用这个组件。
但是普通脚本就需要声明module.exports=xx
require 实际上获取的是目标脚本内的 module.exports 变量，module.exports 默认是一个空对象（{}），可以直接往里面增加新的字段。  module.exports.foo =xx

this.player.getComponent('Player') ！！节点里取组件！


Canvas可以被称为画布节点或渲染根节点  场景对应画布Canvas

广告以及分享：
集成第三方sdk，在js中调用即可
分享可以用安卓自己的分享功能，也可以第三方sdk  分享文字，图片，或者超链接
一个节点上的碰撞组件，无论如何都是不会相互进行碰撞检测的

碰撞系统：
两个组件间自动检测，如果碰撞就调用onCollisionEnter方法

creator软件自带的测试项目里的testlist场景加了一堆的测试例子

cc.v2 创造一个向量  有.x .y属性

动作系统
http://docs.cocos.com/creator/manual/zh/scripting/actions.html
CCEaseBackIn   加速反弹

对于物理计算较为简单的情况，我们推荐用户直接使用碰撞组件，这样可以避免加载物理引擎并构建物理世界的运行时开销。而物理引擎提供了更完善的交互接口和刚体、关节等已经预设好的组件。可以根据需要来选择适合自己的物理系统。
so 感觉还是不要物理引擎好


碰撞组件分组：
首先要在属性里修改节点的分组，然后在设置里修改碰撞分组

刚体组件

配乐可以类似小时候警察抓小偷的那种

缓动动作不加就是匀速直线

默认物理引擎(0, -320) 像素/秒^2
update(dt)中的dt应该是表示上一帧到这一帧花费的时间

_cb properties里加_算内部变量？

element.x -= speed;  可以直接移动，不用action


cc.p(xx,yy)快速创建一个vec2对象，拥有x,y属性

动画制作
绑定，添加Animation Clip组件，用动画编辑器编辑Animation Clip组件
https://www.jianshu.com/p/9874f917602d 绑定动画组件 添加clips
onload的时候play动画


碰撞同时碰两个的时候要注意

源码都在github上

AR (Anchor Relative) 

节点才有坐标 组件是绑定在上面的控制元件
this.ground.y + this.ground.height/2;
x,y是节点的x,y值 ，而getPostion()获得的则是父坐标系下的x,y值

所以this.node调用的是本 节点 ，this.xx才是调用的自己脚本里的值。