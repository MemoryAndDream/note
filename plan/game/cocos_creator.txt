onLoad方法会在场景加载后立刻执行
对于需要重复生成的节点，我们可以将他保存成 Prefab（预制） 资源，作为我们动态生成节点时使用的模板

cc.Class，传入一个原型对象，在原型对象中以键值对的形式设定所需的类型参数，就能创建出所需要的类。

cc.Class 里放个  
properties: {
        // 星星和主角之间的距离小于这个数值时，就会完成收集
        pickRadius: 0
    }, 后面就不用改脚本了，可以直接改属性。后面的脚本可以用this.pickRadius 来调用


资源文件夹（assets）放置所有本地资源
资源库（library） 由（assets）生成的东西
本地设置（local）creator编辑器设置 不需要版本控制 
项目设置（settings） 发布相关，如发布平台选择，需要版本控制
project.json 文件和 assets 文件夹一起，作为creator项目的识别


Cocos Creator 内部已经包含完整的 JavaScript 引擎和 cocos2d-x 原生引擎，不需要额外安装任何 cocos2d-x 引擎或 Cocos Framework。
内容创作为导向
Cocos Creator 可以说脱胎自 Cocos2d-JS，它们的 API 一脉相承，有很多相同的部分，但由于使用了全新的组件化框架，两者的 API 是有差异的，并且无法互相兼容
不推荐对节点进行继承和扩展，节点只是一个实体，游戏逻辑应该实现在不同的组件中并组合到节点上

数据驱动：所有对象都可以直接序列化和反序列化
序列化和反序列化支持 Cocos Creator 中类的绝大多数公有属性，这些属性通过属性检查器面板暴露给开发者。开发者可以在编辑器中随意修改并保存，保存的过程就是将资源和场景数据序列化到资源数据库

在 Cocos Creator 中，子节点坐标系的坐标原点就是父节点的坐标位置，也就是其锚点的位置。

脚本相关
ctor