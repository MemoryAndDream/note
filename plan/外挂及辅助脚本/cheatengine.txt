http://blog.csdn.net/aasmfox/article/details/53693071

精确数值扫描：http://tieba.baidu.com/p/2322488210
未知初始数值：http://tieba.baidu.com/p/2322501468
浮点数： http://tieba.baidu.com/p/2322517857
寻找代码： http://tieba.baidu.com/p/2322528453
指针： http://tieba.baidu.com/p/2322539055
代码注入： http://tieba.baidu.com/p/2322579352
多级指针： http://tieba.baidu.com/p/2322588800
生成修改器： http://tieba.baidu.com/p/2322630649



https://www.52pojie.cn/thread-692068-1-1.html
搜索游戏中的增量和减量
锁定值调试(一次锁定一半) 但是游戏引擎的话可能有几千个，但是那些值应该是分组的。锁定其实就是ce根据设置的时间间隔不断写入
找基址


代码注入，因为代码在内存中的地址是固定的。

游戏的物理引擎和绘图引擎并不是运行在同一线程上的，不同线程都不是一起运行的，他们的栈肯定也不是共用的，所以他们之间只能通过堆内存来沟通。这带给我们一个好处就是，堆内存是可以通过 CE 很方便地进行搜索的。但也带给我们一个问题就是，你修改数值的时机必须恰到好处，恰好在一个线程写入，另一个线程读取之前修改 （这里可能存在一些问题，） ，这通常在线程外是很难做到的。总之多线程技术给我们带了很多麻烦，导致我们不得不去使用代码注入



程序自带的教程很有用！

基址：电脑找一个地址不固定的变量在哪靠的是基址

变量的地址应该是以程序基址为起始地址的相对地址，所以是一直不变的
但是程序基址每次运行都是不一样的。cpu在计算的时候要根据基址和相对地址进行计算得出物理地址后，从内存中取出数据
除非用了ASLR（地址空间布局随机化）技术，借助这个技术，PE文件每次加载到内存的起始地址都会随机变化。不然能找到基址。

程序运行时，编译器生成的可执行码中的地址都是虚地址。操作系统负责把虚拟地址转换为物理地址。

每个进程都有自己的基址！！
各种进程空间, 虚拟地址是隔离的.
基址, 即是程序代码被编译成二进制码时就已经规定好的一个绝对地址值.
一般反汇编后为: mov xxx  [XXXXXX]    //XXXXX就是16进制数字代表的值, 除非程序被破坏,或者被重新编译生成,否则是不会改变的. ！！！！！


要保持堆栈平衡！就是一个函数不能改变堆栈状态！

因为你是根据内存地址去修改程序的，所以你的修改不能改变源码的内存地址！！比如用nop替换


http://bbs.52miji.com/thread-389 0-1-1.html 自动汇编


指针： 目标地址可能是指针获取的，就是每次地址都会变。有些常量是编译完地址就确定的，但是有时候是定义了一个固定的指针


因为有偏移量，所以不见得搜索就能找得到
内存是按字节编址的,所以单位是字节！
编译语言和脚本语言是有区别的。。。一个是解释器解释的每次都重新编译链接，一个是变成机器码载入内存的。
可执行文件才是可以直接加载进内存成为进程的
336
324
348
复杂的程序要用od调试！！

把一步步的指针从内存里【用值搜索出地址！】指针就是考虑了偏移量。

不用每次都建指针的！建一次就行啦

可以保存成ct文件