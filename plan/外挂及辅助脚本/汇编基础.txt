汇编语言是二进制指令的文本形式，与指令是一一对应的关系。比如，加法指令00000011写成汇编语言就是 ADD。只要还原成二进制，汇编语言就可以被 CPU 直接执行，所以它是最底层的低级语言。
最常见的 x86 汇编语言，即 Intel 公司的 CPU 使用的那一种。

内存 - cpu缓存 - 寄存器（最频繁读写的数据（比如循环变量）） - cpu

有100多个寄存器

32 位 CPU 的寄存器大小就是4个字节。

因为用户主动请求而划分出来的内存区域，叫做 Heap（堆）。Heap 的一个重要特点就是不会自动消失，必须手动释放，或者由垃圾回收机制来回收。

除了 Heap 以外，其他的内存占用叫做 Stack（栈）。简单说，Stack 是由于函数运行而临时占用的内存区域。

 
push pop move ret jxx(跳转)

起始地址是较小的那个地址，结束地址是较大的那个地址。

高位存高位数据 

所以如40339C 的值需要从高位读起  比如存着 1A 2B  3C  那完整的就是3C2B1A

push指令用于将运算子放入 Stack
push指令其实有一个前置操作。它会先取出 ESP 寄存器里面的地址，将其减去4个字节，然后将新地址写入 ESP 寄存器
ESP栈顶指针 ebp是基址指针
能操作那一端为栈顶。 汇编中，那么栈顶的物理地址是低地址、栈底的物理地址是高地址


相比32位汇编，64位汇编的通用寄存器在数量上多了8个，共有16个通用寄存器，其中八个是兼容32位汇编的，分别是将原来的名称e**改成了r**


JMP: 始终跳转(Always jump to)
JE/JZ: 相等则跳转(Jump to if equal) 
JNE/JNZ: 不等则跳转(Jump to if not equal)

mov eax,ebx 把ebx里存的地址放到eax里  相当于move to eax from ebx
mov eax,[xxx] 把xxx的值存到eax所存的地址里  加个框表示的是内存里的值
 mov [eax],[ebx] 不行！不能把值赋过去，需要寄存

比如：
mov ax, [2000h]      ;这里是把当前数据段2000h单元的字数据取到ax中，这里2000h是地址。
mov ax, 2000h        ;这里是把2000h送到ax中，这里2000h是数据。

mov ebx, [eax＋edx*2＋300]  32位寻址 基址+变址+偏移量
上面那3部分可进行任意组合，省去其中之一或之二。

Mov ax, [123456]

Mov eax, [ebx]

Mov ebx, [ecx*2]

Mov ebx, [eax＋100]

Mov ebx, [eax*4＋200]

Mov ebx, [eax＋edx*2]

Mov ebx, [eax＋edx*4＋300]

Mov ax, [esp]

32位微机系统中，它有6个段寄存器，所以在此环境下开发的程序最多可同时访问6个段。
内存单元的物理地址由段寄存器的值和一个偏移量组合而成的，这样可用两个较少位数的值组合成一个可访问较大物理空间的内存地址。


物理地址=段地址偏移后加上偏移量

int add_a_and_b(int a, int b) {
   return a + b;
}

int main() {
   return add_a_and_b(2, 3);
}



_add_a_and_b:
   push   %ebx
   mov    %eax, [%esp+8] 
   mov    %ebx, [%esp+12]
   add    %eax, %ebx 
   pop    %ebx 
   ret  

_main:
   push   3
   push   2
   call   _add_a_and_b 
   add    %esp, 8
   ret